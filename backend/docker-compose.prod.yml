# ==============================================================================
# Production Docker Compose Configuration for hotly-app
# ==============================================================================
# Usage:
#   docker-compose -f docker-compose.prod.yml up -d
#   docker-compose -f docker-compose.prod.yml down
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # FastAPI Application Server
  # ==============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: runtime
    image: hotly-app:${VERSION:-latest}
    container_name: hotly-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
    environment:
      # Application
      - ENVIRONMENT=production
      - DEBUG=false

      # Database
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-hotly_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - POSTGRES_DB=${POSTGRES_DB:-hotly_db}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-hotly_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-hotly_db}

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # API Keys (from .env.production)
      - KAKAO_API_KEY=${KAKAO_API_KEY:?KAKAO_API_KEY is required}
      - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY:?GOOGLE_GEMINI_API_KEY is required}
      - SUPABASE_URL=${SUPABASE_URL:?SUPABASE_URL is required}
      - SUPABASE_KEY=${SUPABASE_KEY:?SUPABASE_KEY is required}

      # Security
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}

    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hotly-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ==============================================================================
  # PostgreSQL Database with PostGIS
  # ==============================================================================
  db:
    image: postgis/postgis:15-3.3-alpine
    container_name: hotly-db
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-hotly_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - POSTGRES_DB=${POSTGRES_DB:-hotly_db}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hotly_user} -d ${POSTGRES_DB:-hotly_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hotly-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ==============================================================================
  # Redis Cache
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: hotly-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hotly-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ==============================================================================
  # Nginx Reverse Proxy (Optional - for production load balancing)
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: hotly-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - hotly-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - production-with-nginx

# ==============================================================================
# Networks
# ==============================================================================
networks:
  hotly-network:
    driver: bridge

# ==============================================================================
# Volumes
# ==============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
